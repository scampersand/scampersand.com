@import "susy";
@import "partials/normalize";
@import "partials/hacks";

/**
 - Reset
 */

blockquote, h1, h2, h3, h4, h5, h6, p, ul, li, fieldset {
    margin: 0;
    padding: 0;
}

img, video {
    max-width: 100%;

    /* auto height preserves ratio when the image is scaled. */
    height: auto;
}

// https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
.flex-ie-hack {
    display: flex;
    flex-direction: column;
}

.flex-vertical-center {
    display: flex;
    flex-flow: column;
    justify-content: center;
    padding-top: 2em;  // 2x nav top
    padding-bottom: 2em;  // maintains centering
    min-height: 100vh;  // in case calc() doesn't work
    min-height: calc(100vh - 54px);  // 54px is mobile nav header
    @media screen and (min-width: 30em) {
        // 57.75px is desktop nav header.
        // This doesn't change at 65em when the menu items are revealed.
        min-height: calc(100vh - 57.75px);
    }
}

.flex-item-wrapper {
    /*
    h1.landing and p.landing both have max-width constraints. Normally
    div.section-container would still occupy the full width available and the
    auto margins on right and left would center the block on the page. In other
    words, the width of div.section-container shouldn't be determined by its
    content but rather by the available space.

    However when div.section-container is a flex item--meaning the direct child
    of a flex box--then the calculations changes. Instead of occupying width
    available, its width corresponds to the width of its h1 and p content. The
    result is that the susy container appears indented rather than flush left
    aligned with the top bar content.

    The first workaround was to put flexbox inside the susy container, see
    55e067d. However that results in bad rendering on iphone 4 and old android
    browser.

    This new workaround adds div.flex-item-wrapper which seems to iron out the
    cross-width calculation on the flex box. This way div.section-container is
    no longer a flex item itself and spans the intended width.
    */
}

/**
 - Columns
 */

$susy: (
    // debug: (image: show),
    global-box-sizing: border-box,
    columns: 8,
);

@include border-box-sizing;

div.section-container {
    // from 16 base font size
    @include container(75em);

    padding-left: 1em;
    padding-right: 1em;

    @media (min-width: 25em) {
        padding-left: 1.5em;
        padding-right: 1.5em;
    }

    @media (min-width: 48em) {
        padding-left: 5em;
        padding-right: 5em;
    }
}

div.proj-solution {
    @include span(full);
}

/* when the project includes a visual,
 * use 3 columns for intro text
 */
div.proj-intro {
    @media (min-width: 56em) {
        @include span(3);
    }
}

/* when there is no accompanying visual,
 * match the width of the main text
 */
div.col-width-main {
    @media (min-width: 56em) {
        @include span(5);
    }
}

div.proj-header-image,
div.proj-header-video {
    /* ensure the image or video fully occupies its container, even if we only
     * have a lower resolution to offer.
     */
    img, video {
        width: 100%;
    }
    @media (min-width: 56em) {
        @include span(last 5);
    }
    @media (min-width: 75em) {
        margin-top: -180px;
    }
}

/* IE11 tries to play one of the videos and fails, so
 * the fallback image at the end of the video node doesn't
 * kick in. Instead we use CSS to hide the video on IE and
 * display the image.
 */
.only-ie {
    display: none;
}
@include only-ie {
    .not-ie {
        display: none;
    }
    .only-ie {
        display: block;
    }
}

div.proj-problem,
div.solution-text,
div.solution-pieces,
div.proj-image,
div.proj-video {
    @media (min-width: 56em) {
        @include span(5);
    }
}

div.solution-features {
    @media (min-width: 56em) {
        @include span(2 wide last);
    }
}

div.contact-form {
    @media (min-width: 56em) {
        @include span(4);
    }
}

div.contact-map {
    position: relative;
    .overlay {
        position: absolute;
        height: 100%;
        width: 100%;
        background: transparent;
    }
}

div.ref-services {
    display: none;
    @media (min-width: 56em) {
        display: block;
        @include span(4);
    }
}

div.contact-location,
div.ref-social {
    @media (min-width: 56em) {
        @include span(4 last);
    }
}

/* clear any floated children in galleries */
div.section-sub:after {
    content: '';
    clear: both;
    display: block;
}

@import "partials/color";
@import "partials/type";
@import "partials/scale";

@import "partials/layout";

@import "components/callout";
@import "components/cards";
@import "components/form";
@import "components/lists";
@import "components/nav";
